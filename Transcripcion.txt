JavaScript avanzado: Buenas prácticas
https://www.linkedin.com/learning/javascript-avanzado-buenas-practicas/presentacion-del-curso-javascript-avanzado-buenas-practicas?contextUrn=urn%3Ali%3AlyndaLearningPath%3A59ba65c9498ec518b0f18061

Las buenas prácticas son un conjunto de recomendaciones basadas en las rutinas de otros desarrolladores y gracias a ellas, tu trabajo será más comprensible, mejor organizado y tendrá un mejor rendimiento. En este curso conocerás las buenas prácticas más populares y eficaces, que harán que tu trabajo como desarrollador usando JavaScript mejore y sea más práctico al trabajar en una nueva aplicación web. Estas buenas prácticas se convertirán en el set de acciones que incorporarás en cada proyecto web y que ayudarán a que tu código sea mejor.

0. INTRODUCCIÓN

0.1 Presentación del curso “JavaScript avanzado: Buenas prácticas”

Día a día, todos los desarrolladores de "software", ya sea web o de escritorio, nos encontramos con prácticas comunes que siempre agregamos a nuestro proceso de desarrollo. Algunas, porque ya las conocemos y sabemos que funcionan bien. Otras, porque hemos visto y comprobado que a otros desarrolladores les funciona bien y lo usan como una práctica general. Soy Sergio Brito y en esta serie de vídeos conocerás las mejores prácticas para trabajar y desarrollar aplicaciones web con JavaScript. Conocerás y aprenderás cómo replicar estas prácticas comunes que otros desarrolladores han aplicado con resultados exitosos y que podrás aplicar a tu proyecto. Siempre es recomendado que, por cada lenguaje de programación nuevo que conozcamos, después de aprender los conceptos básicos, nos familiaricemos con las buenas prácticas de desarrollo del lenguaje en cuestión. Estas son las buenas prácticas. Aquellas que, por el uso común entre desarrolladores, indican un buen resultado si se aplica en un entorno adecuado. Aplicar las buenas prácticas a todo desarrollo que hagas es un buen hábito que todo desarrollador de "software" debe hacer con cada nuevo proyecto que realice para así tener una base sólida de código, con el cual lograr una aplicación exitosa y, sobre todo, muy profesional.


1. INTRODUCCIÓN A LAS BUENAS PRÁCTICAS CON JAVASCRIPT


1.1 Objetivos de Buenas prácticas con JavaScript

El objetivo de este curso es que puedas conocer las mejores prácticas de trabajo con JavaScript. Prácticas que van a ir desde la integración con variables, algunas estructuras y objetos, algunos cálculos que podemos llegar a evitar, el trabajo con Estilo, formas de declarar un variable, para qué me sirve la "indentación", cómo trabajar con un punto y coma, cómo puedo trabajar con comentarios y también generar documentación de mi aplicación con solo escribir el comentario, así como también estaremos repasando algunos puntos sobre organización de código. Organización de código que me va a permitir optimizar mis consultas y mis cálculos, así como también evitarme la duplicidad o establecer bloques bastante bien definidos sobre el uso de funciones. Y del mismo modo, algunas cuestiones sobre "performance" como el uso de alguna notación de objetos, como es JSON, para la manipulación de datos, o cómo poder estar nosotros realizando pruebas de rendimiento directamente en nuestro código, trabajando con JavaScript y la consola de nuestro "browser". Del mismo modo, podrás aprender cómo podemos "minificar" y ofuscar código para que nuestro trabajo sea muchísimo más sencillo. Y el uso de algunas herramientas como puede ser JSHint o JSLink para poder encontrar errores y tener un código bastante limpio y sofisticado en nuestro proyecto de desarrollo web.


1.2 Archivos base de Buenas prácticas con JavaScript

A lo largo de este curso contarás con material de apoyo. Este material te servirá para que puedas comprobar y validar los conocimientos que estás adquiriendo a lo largo del curso. Están divididos en distintas carpetas, donde cada carpeta se incluye material exclusivo que tiene que ver con cada una de las buenas prácticas donde, al abrir cada uno de ellos, encontrarás los ejercicios de manera independiente. Lo único que debes hacer es abrir dichos ejercicios. Recuerda que, como estamos trabajando con JavaScript, cada uno de estos archivos depende del archivo 'index.html'. Por tanto, si tú lo estás ejecutando de alguna manera aparte, recuerda tener bien ligados estos archivos utilizando la etiqueta 'script'. Si vas a trabajar con Sublime Text, te recomiendo que hagas lo siguiente: una vez que hayas abierto las carpetas de tus archivos, selecciónalos todos, arrástralos y déjalos caer. O en su defecto, dale al menú Archivo, Abrir carpetas si estás en Windows, o el menú Archivo, Abrir si estás en Mac, y selecciona las carpetas que quieres abrir. Esto te va a permitir trabajar de tal forma que podrás contar directamente con los ejercicios, sin tener que estar abriendo uno a uno de ellos. Esperamos que este material te sirva de mucho en el proceso de aprender y conocer las mejores prácticas de trabajo con JavaScript.


1.3 Requisitos antes de comenzar este curso de JavaScript

Es muy importante que, antes de comenzar, sepas que debes de contar con los conocimientos básicos de programación y haber trabajado ya un poco, al menos, con JavaScript. Esto dado que estaremos nosotros revisando las buenas prácticas de trabajo con esta herramienta, por lo cual es muy recomendable que ya hayas tenido un acercamiento previo con este. Así, entenderás cuál es la razón de que esta buena práctica se esté aplicando. También, es importante que puedas contar con un editor de texto. El editor de texto que estaremos usando a lo largo de este curso será Sublime Text, el cual podrás conseguir en el sitio web 'www.sublimetext.com' y descargarlo tanto para Mac como para Windows. No es importante que tengas un conocimiento sobre CSS o sobre HTML profundo, pero sí que tengas las bases también de HTML. Entonces, en resumen, debes contar con el conocimiento básico de HTML, haber trabajado ya, aunque sea un poco, o interactuado en los conceptos más básicos, con JavaScript y contar con un editor de texto. Con estos tres elementos, en conjunto, podrás sacar mayor provecho de este curso sobre las buenas prácticas de trabajo con JavaScript.



2. PRÁCTICAS GENERALES EN JAVASCRIPT

2.1 Aprende HTML y CSS

La potencia que tiene JavaScript está dada principalmente por la relación que tiene con otros lenguajes, como lo es HTML y las Cascadas de Estilo. Por tanto, es muy importante tener al menos el conocimiento básico sobre cómo funciona cada uno de estos lenguajes y la relación que tiene con JavaScript, pues es precisamente la relación entre estos lenguajes lo que provoca que tengamos aplicaciones web bastante robustas y bastante llamativas, dado que esto funciona de una manera muy ligada. Por ejemplo, HTML da toda la estructura que va a tener una página o una aplicación web. CSS 3, en este caso, provee toda la vista que el usuario va a poder estar contemplando al momento de acceder a una página o algún sitio web. Y JavaScript, obviamente, va a proveer toda la interacción en la cual el usuario va a poder sacar provecho de la información contenida en el sitio. Como ves, entonces, la combinación de estas tres herramientas es muy importante. Por lo cual, si tú tienes un conocimiento bastante robusto sobre CSS 3 y HTML, es por seguro que podrás sacar gran provecho de JavaScript y llevar tus aplicaciones web al máximo.


2.2 Primero JavaScript

Uno de los errores más comunes de muchos desarrolladores y diseñadores web de la actualidad es que buscan primero comenzar a trabajar con JavaScript desde un "framework". Es decir, buscan primero aprender el uso de herramientas como jQuery, AngularJS o React, por ejemplo, para poder trabajar directamente con JavaScript. Cuando la realidad es que primero hay que aprender JavaScript, puesto que este es el lenguaje que da pie a "frameworks" de esta talla y a herramientas tan poderosas como puede ser Cordova, PhoneGap o Ionic. La idea es que primero trabajes y entiendas cómo funciona JavaScript antes de aventurarte a trabajar con otros "frameworks" que, si bien te van a facilitar la vida, es necesario que tengas unas bases sólidas sobre el uso de JavaScript. Si logras tener una base sólida utilizando JavaScript, desde la resolución de problemas hasta la implementación de estos u otros "frameworks", te van a hacer muchísimo más sencilla la labor de estar desarrollando una aplicación o un sitio web.


2.3 Especificación y documentación de JavaScript

Siempre una buena práctica va a ser poder consultar la especificación, documentación o referencias del lenguaje en el que estemos trabajando. Y tal es el caso con JavaScript. Es muy recomendable que puedas entrar directamente al documento de especificación y consultar todas las características que tiene. Muy probablemente aquí puedes resolver muchos problemas que se te presentan día a día. Aunque haya libros bastante especializados sobre algún tema en específico o sobre temas en general de JavaScript, nada se compara a la especificación original del lenguaje. O, por ejemplo, consultar alguna referencia que existe en la web, donde podrás encontrar cuestiones desde cómo se aplican determinadas características de la herramienta, hasta detalles de la librería y estos cómo te van a poder ayudar. La documentación es pieza clave en todo desarrollo web. Por tanto, no le tengas miedo y comienza a ocuparlo, para que puedas conseguir el mayor provecho de todo desarrollo que vayas a trabajar.


2.4 PRUEBA PENDIENTE (3 PREGUNTAS)



3. VARIABLES, ESTRUCTURAS Y OBJETOS EN JAVASCRIPT

3.1 Uso de variables en JavaScript

Para declarar variables es recomendable siempre que lo hagamos al inicio de nuestro programa, es decir, siempre en la parte superior de nuestro código. Hay dos formas en que podemos declarar estas variables. Uno siempre va a ser utilizando por cada variable la palabra reservada 'var'. Por ejemplo, yo puedo tener la variable 'mensaje' y puedo tener la variable 'estado'. Esto es correcto. Pero también es correcto poder utilizarlo de esta manera: separados por comas. Cualquiera de las dos formas es adecuada. Recuerda también inicializar cada una de las variables que vayas a estar utilizando. Esto para que pueda tener un valor a lo largo del programa y puede ser funcional. Por ejemplo, aquí en el mensaje yo puedo agregar '¡Hola Mundo!'. Y aquí en el estado, yo puedo agregar alguna otra variable, por ejemplo, que se llame 'activo'. Si yo quisiera alguna más, simplemente la voy a separar por la coma y voy a agregar la variable que yo necesite. Eso también me facilita un poco la administración del código y me da un código más limpio. Aunque sí es un poco más estricto, pues si llego a olvidar algunas de estas comas, la consola me puede tirar algún error y mi programa no funcionará adecuadamente. Otra de las ventajas que tiene declarar las variables de esta manera es que nos va a reducir muchísimo la posibilidad de tener alguna redeclaración, es decir, alguna variable que nosotros tengamos que volver a declarar, porque olvidamos que ya la teníamos arriba. Dado que ya la tenemos, la consola siempre nos va a lanzar algún aviso, donde nos diga que estamos teniendo algún error o alguna variable con otro tipo de dato que estemos trabajando, a pesar de que JavaScript no es un lenguaje fuertemente tipado. Y, por último, es más sencillo tener un lugar a donde siempre acudir para poder visualizar todas las variables. Si sabemos que todas las variables siempre se van a colocar en la parte inicial de nuestro código, entonces, cada que tengamos que declarar una variable, se nos hace un buen hábito y la vamos a colocar siempre al inicio de nuestro programa. Y también con esto podamos estar evitando algunas variables globales y tener así bien identificado cuál es el alcance de variables que tenemos por cada una de las aplicaciones que estemos trabajando.


3.2 Variables globales en JavaScript

Conforme vamos trabajando en un proyecto en el cual vamos adoptando nuevas tecnologías o simplemente vamos generando más código y separándolo en más archivos, se va haciendo más latente el problema de las variables globales. Es decir, variables que yo puedo tener declaradas en un archivo con un valor, y en otro archivo las voy a sobrescribir. Tal vez no lo haga de una manera directa. Pero mi variable pierde el "scope", es decir, pierde el alcance que yo estoy utilizando. Por ejemplo, en este caso, yo tengo la variable 'mensaje', que en este alcance del archivo 'App2.js' dice 'mensaje global'. Pero en el alcance del archivo 'App.js' cambia hacia 'mensaje local'. Por ejemplo, si esto yo lo comento para que no lo considere, el navegador, cuando lo estoy ejecutando, entonces no me va a aparecer, y el valor que yo voy a estar mostrando será el texto "mensaje global". Vamos a probar en el "browser", actualizo y listo. El mensaje que me aparece es "mensaje global". Pero ¿qué sucede si yo, aún así, vuelvo a redeclarar esta variable y cambio ahora por 'mensaje local'? Estoy afectando el valor original de ese dato. Por tanto, debo ser muy precavido al utilizarlo. Este tipo de riesgo de colisiones en los nombres de variables que yo estoy utilizando, voy a poder compensarlo o solucionarlo utilizando un objeto donde yo defina los datos como propiedades o como métodos, según necesite, que vaya a utilizar. Por ejemplo, en este caso, estoy creando un objeto llamado 'datos' con dos propiedades. Y aquí voy a mandarlas a la consola, donde, al actualizar el "browser", ya tengo otros datos. Porque, en este caso, ya me aparece que es el mensaje local del objeto y el valor que tiene el resultado del objeto, es decir, los datos que yo agregué aquí. Trabajar con este tipo de práctica me ayuda a evitar este riesgo de colisiones y me permite trabajar con el objeto como si este fuera un espacio de nombres para trabajar con variables específicas de este archivo. Recordemos, el riesgo de colisiones es mayor en cuantas más librerías vayamos anexando a nuestro código. Es decir, cuantas más herramientas externas yo vaya adaptando o vaya agregando al proyecto, este riesgo va a seguir creciendo y va a ser muchísimo más latente. Si empezamos a trabajar con este tipo de objetos, vamos a reducir en gran medida este riesgo de problemas con las variables globales.


3.3 Palabras reservadas en JavaScript

Las palabras reservadas son aquellas que cada lenguaje se guarda para su uso funcional, es decir, palabras que tienen un significado y una función específica dentro del lenguaje. Por lo cual, debemos tener cuidado en no utilizar dichas palabras reservadas. Un ejemplo puede ser cuando yo estoy declarando una función y declaro el nombre de esta. en este caso supongamos que vamos a trabajar con una aplicación que tiene que ver con juegos de béisbol y mi líder de proyecto me ha pedido que todo se programe en inglés. Entonces esta función que yo voy a declarar va a realizar la captura de una pelota. Entonces a mí se me hace muy fácil utilizar el método 'catch'. Y después yo le digo esta función 'catch' que estoy generando va a recibir una pelota y la va a mandar a imprimir a la consola. 'console.log (ball)'. Y después, cuando yo la mande a invocar, simplemente le voy a decir 'catch' y vamos a mandar el nombre de la pelota. en este caso vamos a enviar una pelota de béisbol. Hasta aquí pareciera que no hay ningún problema, que todo está escrito tal vez en un correcto inglés. Pero ¿cuál es el detalle? Vamos a probar este código en nuestro navegador. Al actualizar mi navegador, voy a ver que me aparece un error que dice "unexpected token catch". Y esto, ¿qué significa? Bueno, que es una palabra reservada de JavaScript. Para validar lo siguiente, vamos a consultar la referencia que ofrece Mozilla con respecto a JavaScript. Y veamos como aquí efectivamente tenemos una palabra reservada llamada "catch". Esta palabra reservada llamada "catch" lo que va a trabajar es cuando estemos tratando de capturar algún error, al momento de estar aprobando ciertos bloques de código. Por tanto, no la vamos a poder utilizar para nuestra función 'catch' de pelota. Así que tendremos que cambiar el nombre y utilizar algún otro. Por ejemplo, 'myCatch'. Con esto ya estamos cambiando el nombre y estamos dejando de usar una palabra reservada. Este punto es bastante importante para poder garantizar el funcionamiento de mi aplicación y no estar consumiendo recursos que no me va a permitir el lenguaje utilizarlos.


3.4 Cálculos innecesarios con JavaScript

Cuando estamos programando, hay ciertos cálculos que hacemos ya de una manera lógica. Por ejemplo, en este caso, yo estoy haciendo una iteración sobre el arreglo 'animales'. Aquí, cuando yo hago el cálculo, simplemente escribo el nombre de la variable y escribo la propiedad 'length', lo que quiere decir que, con cada iteración, está preguntando cuánto mide la variable 'animales'. Aunque ya lo sepa, va a volver a preguntarlo porque es una instrucción que yo estoy especificando. Por lo cual, yo puedo evitar realizar cálculos innecesarios, es decir, voy a realizar este cálculo una sola vez. para lo cual yo tendría que hacer esto. Tendría que crear una variable que, en este caso, se llamará 'totalAnimales', donde estaré guardando el tamaño que tiene el arreglo 'animales'. Así posteriormente, simplemente voy a hacer el cambio de 'animales.length' por la variable que ya tengo definida con este dato y voy a evitar que este cálculo se esté ejecutando con cada iteración del foro. Probablemente en este ejemplo no haya tanto problema porque solamente son tres registros. Pero ¿qué sucede si de pronto estamos recuperando mucha información, muchos registros de datos? Entonces, aquí es donde ya va a empezar a mermar en el "performance" de la aplicación. Por lo cual, tener siempre una variable donde permitas guardar este tipo de datos nos va a facilitar este cálculo y, obviamente, el "performance" de todo lo que esté desarrollando va a mejorar increíblemente.


3.5 Objetos y funciones anónimas en JavaScript

Trabajar con funciones anónimas es una actividad muy común dentro de JavaScript, pero tiene un pequeño problema. Cuando empezamos a hacer uso de muchas funciones anónimas o funciones anónimas anidadas y otras funciones anónimas anidadas, dentro de una función anónima ya anidada, por ejemplo, por más extraño que se escuche, suele ser una práctica muy común, pero es una práctica que puede mermar en nuestro proceso de depuración, mantenimiento, pruebas o reuso del código que nosotros estemos trabajando. Por tanto, es recomendable que nosotros podamos crear un objeto donde estemos definiendo tanto propiedades y métodos. Sí, es un poco acercarse hacia la programación orientada a objetos. Y aunque en la nueva especificación de JavaScript ya vienen algunos elementos de orientación a objetos, declarar este tipo de variables, por ahora, para poder minimizar el uso de funciones anónimas, me va ayudar bastante y me va a permitir el hecho de que yo pueda estar generando código que me va a ser muchísimo más fácil de mantener y de reutilizar. En este caso, por ejemplo, tenemos una variable que se llama 'tienda'. Tiene una propiedad 'nombre', con el valor 'Tienda las 4 esquinas'. después de esto tiene dos métodos: el método 'calcular' y el método 'saludar', donde el método 'calcular' me regresa una suma de dos parámetros que haya recibido y la función 'saludar' simplemente va a generar un mensaje. En este caso, yo lo que estoy haciendo es ligarlo directamente hacia un botón que está vivo en mi archivo de HTML. Y a partir de esto, voy a escuchar cuando alguien le haga clic. En el momento en el que alguien haga clic sobre ese botón, se va a ejecutar el contenido de esta función anónima, que está declarado dentro del método del 'addEventListener'. Pero simplemente estamos invocando el método de este objeto. A partir de esto, entonces escribir el código de esta forma me va a permitir a mí invocarlo, sin tener que estar redeclarando alguna función y hacer un uso excesivo de funciones anónimas.


3.6 For in en JavaScript

A veces, es necesario iterar sobre las propiedades de un objeto, ya sea para validar si la propiedad existe o para asignar o trabajar con el valor que esta tenga almacenado. Para poder hacer esta iteración, vamos a trabajar con una variante del ciclo 'for', que se llama 'for in'. Para poder hacer esto, primero declaremos una variable 'dato'. Y trabajaremos directamente con este 'for', donde en la variable 'dato', en cada iteración que vaya por persona, estará almacenando el valor. Es decir, cuando esto esté iterando, el primer valor que va a tener será la propiedad 'nombre'. Y ese 'nombre' lo guardará directamente en la variable 'dato', que yo acabo de declarar. Lo mismo para 'email', para 'twitter' y hasta para el nombre de la función. Por lo cual, aquí simplemente vamos a mandar la pantalla. Vamos a mandar un 'console.log'. Y escribamos la variable 'dato', donde viene almacenado el nombre de la propiedad. Vamos a ejecutar esto en el navegador. En cuanto yo lo vaya a ejecutar, aquí en la consola aparecerán todas las propiedades. Efectivamente, aparece el nombre, el "email", el Twitter y el nombre de la función. De hecho, yo también puedo acceder al valor que posee cada uno de estos datos, utilizando entonces el objeto. Y para esto puedo trabajar como si fuera un arreglo asociativo, donde voy a indicar el nombre del objeto, que en este caso es 'persona', y voy a pasarle el valor que yo quiero obtener. Es decir, vamos a entrar al objeto 'persona' y me va a traer el valor del dato, que el valor del dato puede ser el valor que existe en 'nombre', en 'email' o en 'twitter' o en la función. Vamos a guardarlo y vamos a probarlo ahora. Y ahora yo tengo el nombre de la propiedad y su valor. Nombre de la propiedad y su valor. Y cuando yo llego al momento de la función, tengo el nombre de la función y la estructura y declaración de dicha función. Con esto, entonces voy a poder navegar sobre cada una de las propiedades, ya que esta variante del ciclo 'for' está diseñada específicamente para esto, y utilizarla en estas situaciones es una muy buena práctica.


3.7 Validar objetos en JavaScript

Una de las carencias que tiene JavaScript es el hecho de que no es un lenguaje fuertemente tipado, por lo cual a veces resulta complicado estar trabajando con cierto tipo de datos, incluso verificar si cierto tipo de dato existe o no existe. Pero para poder evitarnos en ciertos casos, podemos utilizar simplemente una validación muy sencilla. En este caso, cuando una variable existe, automáticamente cuando yo hago una pregunta sobre esto, me va a regresar un valor de 'true' o 'false', donde el mismo lenguaje va a inferir este valor. Por ejemplo, vamos a mandar a imprimir en consola el valor de 'persona' como tal. Vamos a probarlo. Y una vez que lo pruebo, me arroja que tiene un objeto. Pero JavaScript lo entiende como si fuera un valor 'true'. Por eso mismo es que también, en la decisión que yo tengo aquí, es donde estoy preguntando 'if(persona)', es decir, si la persona existe o si el valor de la persona es igual a 'true', entonces me va a mostrar en consola que la persona existe. Voy a comentar, por ahora, la declaración de la variable 'persona' para que veamos qué sucede. En cuanto yo lo ejecuto, esto me arroja un error porque me dice simplemente que este objeto no está definido. Y a veces vamos a poder evitar mucho de este tipo de errores simplemente haciendo una validación, es decir, preguntando si el objeto existe. Entonces, si el objeto existe, voy a poder ejecutar alguna transacción o alguna operación.


3.8 Expresiones booleanas en JavaScript

Al estar haciendo la evaluación de una condición, no siempre va a ser necesario estarlo validando de una manera explícita. Es decir, no siempre va a ser necesario tener una validación como esta, donde me está indicando siempre 'if(estado)' es igual a 'true', ya que toda condición infiere inmediatamente o pregunta si ese objeto tiene algún valor asignado o no. Por ejemplo, en este caso, la variable 'estado' tiene asignado el valor 'true'. Por eso simplemente yo escribo 'if(estado)', es decir, si este estado trae consigo algún valor positivo. En este caso, si trae un valor de 'true', va a ejecutar la instrucción de mandar a consola el texto "continuar". De lo contrario, enviará el texto "detenerse". Pero, ojo, porque también puede haber algunas variantes. Por ejemplo, yo puedo tener una variable llamada 'resultado', a la cual no le voy asignar ningún valor. Cuando yo estoy asignando este tipo de situaciones, es decir, simplemente estoy agregando unas comillas vacías, va a significar que el valor que tiene aquí va a ser falso. Vamos a hacer un cambio. Vamos a mover la validación que tenemos ahora con 'estado' por 'resultado'. Podríamos entender que sí, que hay un texto vacío, pero realmente no hay nada. Por tanto, vamos a ver qué es lo que me arroja en consola esto al probarlo en el "browser". Simplemente, al ejecutarlo, me va a mostrar en pantalla el texto "detenerse", que es lo que sucede cuando esto simplemente fue falso. Y esto es dado que JavaScript maneja estos valores de esta forma. Pero nosotros podemos seguir entonces contando con la validación de expresiones booleanas directamente aquí. ¿Por qué booleano? Porque todo valor booleano simplemente puede tener un valor positivo o un valor negativo. Y en este caso, al tener estos valores –vamos a probarlo nuevamente–, como el valor que tiene la propiedad de 'estado' es igual a 'true', entonces me va a mostrar el valor "continuar" en pantalla. Con esto entonces vamos a ahorrarnos muchos espacios al momento de estar haciendo validaciones no explícitas en alguna condición.


3.9 Operador ternario en JavaScript

Uno de los operadores menos usados y muy potentes es el operador ternario, que me va a permitir convertir este tipo de estructuras en consultas de 'if' y 'else' de una sola instrucción, convertirlos a una sola línea. Por ejemplo, voy a eliminar por ahora este código comentándolo, y vamos a escribir una variable que se llame 'acción'. En este caso, va a depender de un 'estado'. Y utilizaremos el símbolo de interrogación para preguntar lo siguiente: si el 'estado' es válido, es decir, si el 'estado' es igual a 'true', entonces va a ejecutar la instrucción 'continuar'. De lo contrario, vamos a utilizar la opción 'detenerse'. Generalmente, el operador ternario se utiliza para la asignación de valores que sean resultado de una decisión. En resumen, es como una forma más corta de utilizar el 'if y el 'else'. Como vemos en este caso, lo único que estoy haciendo es preguntar a través de una expresión booleana si yo continúo o me detengo. En este caso, la sintaxis diría: condición, qué hago si todo sale verdadero o qué hago en caso de que la condición no sea cumplida.


3.10 Igualdad con JavaScript

Una de las características más controvertidas que tiene JavaScript es el uso del triple igual y el uso del doble igual cuando vamos a estar validando información o comparando información. La diferencia entre ellos está en cómo la igualdad es determinada, puesto que el operador del triple igual evalúa los dos elementos basado en su tipo y el valor, es decir, no hace interpretaciones. En tanto que cuando nosotros trabajamos con el doble igual sí hace una interpretación y trata de forzar la conversión de los dos valores para que la comparación resulte positiva. Y esto obviamente puede traernos resultados bastante desagradables. Veamos como se comporta entonces esto. Dado que el triple igual va a estar haciendo la validación basado en el tipo y el valor, este nos debería de regresar un valor falso, porque realmente no es la igualdad concreta. Es decir, esto es una cadena de texto y esto es un número. Pero en este caso, cuando trabajamos con el doble igual, sí me va a salir un valor verdadero. ¿Por qué? Porque simplemente está forzando esa conversión. Vamos a probar nuestra aplicación en el navegador. Y efectivamente la línea dos, que en este caso está dirigida por el triple igual, me está mostrando un valor de falso. Porque sí, efectivamente, no es un valor, porque esto está determinado por el tipo y el valor. Y en el segundo caso, la igualdad con el doble símbolo de igual está determinando un 'true', porque está forzando la conversión. Así que, entonces, lo recomendado aquí es utilizar siempre el triple igual para cuando tengamos que hacer alguna validación de igualdad de contenidos.


3.11 Constructores de objetos en JavaScript

Siempre que trabajemos con objetos y que los estemos generando a partir de una función, va a ser muy importante que podamos inicializar dicho objeto utilizando la capacidad constructora que tienen estas funciones de manera intrínseca. Por ejemplo, vamos a crear una función que se llame 'Persona' –'function Persona'– y nosotros, cuando tengamos esta declaración, simplemente los parámetros que recibe serán los parámetros con los cuales se va a inicializar. En este caso, puede ser 'nombre' y 'apellidos'. Y aquí adentro haremos uso de la palabra reservada 'this' para poder hacer esta inicialización, lo que quiere decir que, cuando yo haga una instancia de esta clase, voy a poder acceder a dichas propiedades. Entonces, en este caso, yo estoy diciendo que 'persona' tiene un 'nombre' y le estoy haciendo la referencia con la palabra reservada 'this'. Para esto, le estoy asignando ahora el nombre que va a venir directamente desde fuera, es decir, desde el momento en el que estoy haciendo la instancia de dicho objeto. Voy a hacer lo mismo para la propiedad de 'apellidos'. Y lo agregamos de esta manera. Aunque a veces también estos nombres pueden cambiar, es decir, estos parámetros pueden cambiar de nombre, no necesariamente estos internos tienen que cambiar, porque estos son los que van a describir al objeto. Pero con este paso ya lo tenemos inicializado, lo que quiere decir que si yo voy a crear una nueva persona –por ejemplo, vamos a crear aquí 'var persona = new Persona'–, vamos a poder enviar los datos para que este se inicialice, que en este caso puede ser una cadena de texto, donde mandemos un nombre como 'Sergio Brito'. Ahora vamos a mostrarlo en consola para ver los resultados que nos ha dado esto. Voy a mandar a imprimir en consola el objeto completo de la persona, así como el objeto con el nombre y con los apellidos, por separado. Probemos en el navegador. Al ejecutarlo, me van a aparecer aquí los datos que yo puse, es decir, el objeto completo con las propiedades que yo creé. Y estas propiedades como tal pertenecen al objeto 'persona'. Y me aparecen de esa manera gracias a que yo agregué la palabra reservada 'this' para poder asignárselos a ese objeto. Y, del mismo modo, me aparece la impresión en pantalla de cada una de las propiedades que yo decidí mostrar de este objeto. Con esto, entonces, ya tenemos un objeto declarado e inicializado previamente, el cual ya podremos utilizar sin ningún problema.


3.12 Try and catch con JavaScript

Trabajar con "try and catch" me permite a mí poner a prueba un bloque de código y, si este llega a presentar algún error, entonces poder manejarlo utilizando 'catch'. Es decir, dentro de 'try' yo voy a agregar todas las acciones que yo quiera trabajar, es decir, todo lo que yo quiera estar probando. Y si este llega a representar algún error, entonces lo vamos a atrapar utilizando esta parte en la sección 'catch'. Así yo voy a poder reaccionar en consecuencia al error. Pero aquí hay un detalle que debemos evitar. Cuando trabajamos con algún ciclo, como puede ser en este caso el ciclo 'for', nosotros estamos agregando el "try and catch" dentro del ciclo 'for'. Aquí lo que sucede es que el "try and catch", cada que se está construyendo, crea una nueva variable en el ambiente actual. por lo que con cada una de estas repeticiones que estamos haciendo, se está generando una nueva variable para poder gestionar el "try and catch". Entonces aquí lo único que tendríamos que hacer sería un ajuste, donde nosotros llevamos prácticamente este 'try' hacia fuera del 'for'. Y dejamos que todo el bloque completo de las acciones sea el 'for', es decir, mis acciones a realizar van a ser, tal cual, todas las que me está indicando el 'for' por dentro. No es necesario que yo esté haciendo una nueva instancia de "try and catch" con cada iteración que vaya a ocurrir del 'for'. Por lo cual, será conveniente que todo el bloque completo vaya con el 'for' y, si de aquí hay algún problema, lo podemos capturar utilizando 'catch'. Esta es la manera adecuada en la que podemos manejar este tipo de situaciones cuando estemos trabajando con un ciclo y necesitemos poner a prueba determinados bloques de código.


3.13 Literales en JavaScript

Una de las formas más prácticas de poder utilizar un objeto y un arreglo cuando trabajamos en JavaScript es a partir de las literales, es decir, cuando no estaremos utilizando el objeto 'new'. Si nosotros vamos a trabajar con alguna clase, por ejemplo, y hablemos de los objetos, y tenemos que generar métodos y tenemos que generar prototipos y tenemos que generar propiedades, entonces sí nos conviene trabajar con el objeto 'new', porque vamos a estar haciendo el uso completo de las características activas de la programación orientada a objetos. Pero si solamente vamos a utilizar o vamos a generar un objeto para poder expresar algún elemento pequeño a lo largo de mi programa, no vale la pena invocar a un método constructor para que se construya todo el objeto que vamos a necesitar. Porque existirán métodos que consumirán muchos recursos para solamente declarar un par de propiedades. Para esto la forma que tenemos de declarar un objeto será escribiendo el nombre de este –vamos a ponerle el nombre 'persona'– y simplemente utilizamos dos llaves. Al hacer esto, estamos declarando este objeto de una manera muy diferente a como la conocemos, que es de la siguiente forma: voy a declarar un objeto que se llame 'otraPersona' y, si yo quisiera levantar el objeto de forma tradicional, yo tendría que utilizar la palabra reservada 'new' y utilizaríamos el objeto para poder hacer la instancia. En este caso, lo que estamos haciendo es invocar todo lo que hay detrás de 'new' para que se genere una instancia adecuada al objeto. Pero si lo único que yo quiero posteriormente es decirle aquí a 'persona.nombre' y agregarle algunas cuántas propiedades o métodos, no vale la pena invertir en el uso de este 'new' para poder utilizar solamente una propiedad. No estamos diciendo que este uso del "new" sea incorrecto sino que hay que validar en qué momento lo vamos a utilizar. Del mismo modo, sucede cuando trabajamos con un arreglo. Originalmente un arreglo podemos declararlo de esta forma: 'var lista = new Array'. Y listo. Con esto, tenemos declarado un arreglo. Pero sucede lo mismo. ¿Cuántos datos vamos a almacenar? ¿Van a ser muchos? ¿Van a ser pocos?. En el caso de que simplemente sean muy pocos los datos. Por ejemplo, si yo quisiera guardar el nombre y el apellido, yo tendría que utilizar aquí 'lista'. O más bien cambiemos un poco el "scope". Si es una lista, vamos a poner productos. Entonces, yo tendría que decir 'lista' en la posición 0 va a ser igual a 'manzana'. 'Lista' en la posición número 1 va a ser igual a 'pera'. Con esto obviamente tenemos la asignación y podemos trabajar sin problemas. Pero ya tenemos la implicación de todo lo que conllevó en procesamiento traer el 'new'. Si solamente vamos a utilizar dos propiedades o dos elementos, simplemente no vale la pena. Si vamos a utilizar algo así de sencillo, lo único que tendríamos que hacer es lo siguiente: crear de esta manera distinta el arreglo, donde yo simplemente voy a poner una nueva variable, que le llamaremos ahora 'listaNueva' y simplemente declaro el nuevo arreglo. Cuando tenemos los corchetes de esta forma, ya se está declarando el nuevo arreglo. Pero yo puedo inicializarlo. ¿Cómo? Utilizando comillas puedo mandar el primer dato que, en este caso, sería 'manzana' y posteriormente mando el siguiente, que es 'pera'. Como tal, ninguna de las formas es mala. Todas son buenas. Solamente tenemos que validar la cantidad de información que va a vivir dentro de cada una de estas variables, dependiendo del objetivo que tengan a lo largo de nuestro programa. Además, este tipo de literales, cuando estamos trabajando en el caso de un objeto, me va a permitir a mí agregar más propiedades o más métodos al vuelo, según yo lo vaya necesitando, porque mi programa puede ir cambiando el flujo de la información a lo largo de su ejecución. Entonces, de esta manera, podemos sacar también más provecho de declaraciones de este tipo a través de literales.


3.13 PRUEBA PENDIENTE - 15 PREGUNTAS



4. ESTILO EN JAVASCRIPT

4.1 Formato de variables en JavaScript

Para poder escribir nombres de variables o de funciones, podemos seguir también un estilo en el formato. Por ejemplo, podemos trabajar con el estilo CamelCase" o el estilo Snake case. El estilo CamelCase va de la siguiente manera. Vamos a declarar una variable que se llame 'nombreCompleto', asignaremos un valor que, en este caso, pongamos el nombre del instructor, y vamos a ver cómo se compone. CamelCase me indica que la primera letra de la primera palabra va a ir en minúscula y la primera letra de las subsiguientes palabras irá en mayúscula para poder identificar en qué momento hay un cambio de palabras. También es posible utilizar el Snake case. Y para esto yo puedo utilizar lo siguiente. Vean como aquí estas dos palabras están divididas por un guion bajo. Esto quiere decir que estoy utilizando este tipo de formato. Del mismo modo, esto me va a servir a mí para cuando yo necesite declarar el nombre de una función. Por ejemplo, función 'saludar Persona'. en este caso el nombre de la función está dado y escrito con el formato CamelCase, pero está declarado ahora como parte del nombre de una función. Puedes seguir cualquier estilo en el momento de escribir los nombres de variables o de funciones. Solo procura que el estilo que sigas sea el estilo que vas a utilizar a lo largo de todo el programa.


4.2 Constantes en JavaScript

Para el caso de las constantes será importante seguir un patrón estándar. Este patrón indica que el nombre de la constante debe de ir escrito con mayúsculas. Por ejemplo, vamos a declarar una constante llamada 'LÍMITE'. Esta constante llamada 'LÍMITE' está declarada en mayúscula, dado que así será más fácil reconocer este tipo de datos a lo largo del programa como una constante, es decir, como un contenedor de datos que no va a cambiar su contenido en ningún momento. Si nosotros vamos a trabajar con un nombre de constante compuesto, es decir, de más de dos palabras, va a ser importante entonces utilizar el formato Snake case. Por ejemplo, vamos a crear una constante llamada 'LÍMITE_ TOTAL'. Y aquí, como podemos ver, tenemos dos palabras separadas por un guion bajo. Resulta entonces obvio que no podemos aplicar nosotros, en este caso, un resultado de tipo CamelCase, puesto que toda la palabra está expresada en mayúsculas, siguiendo el estándar de cómo se escribe una constante.


4.3 Indentar código en JavaScript

Cuando el código de nuestra aplicación comienza a crecer, va a ser muy importante tenerlo bien "indentado", es decir, dejar espacios suficientes o sangrías suficientes entre cada una de las expresiones que lleguen a componer cualquier elemento de mi programa. Esto puesto que me va a permitir entonces entender de una mejor manera el código. Por ejemplo, veamos como este bloque de la línea 1 a la línea 5 se puede entender de una manera más sencilla. Pero el bloque que va de la línea 7 hasta la línea 16 es más complicado de entender, porque todo está pegado. Es decir, no hay una sensación de pertenencia. Por ejemplo, en esa situación, yo puedo entender que 'tienda' tiene por aquí esta propiedad y también le corresponde este método. Con esto, se da una sensación de pertenencia, es decir, que tanto 'nombre' como la función 'calcular' o hasta este caso la función 'saludar' pertenecen a la variable 'tienda'. Por tanto, entonces la "indentación" de código me ayuda con esta comprensión de mi código. Hay una librería bastante interesante llamada Sublime-HTMLPrettify que, en el caso de que tú trabajes con Sublime Text, te va a permitir hacer la "indentación" de una manera automática. Veamos cómo funciona. Una vez que ya lo tienes instalado, lo único que tendrás que hacer es pulsar el juego de teclas, para el caso de Mac, Cmd + Shif t+ H y, para el caso de Windows, Ctrl + Shift + H. Y con esto vean como automáticamente el código quedó "indentado". No importa si son 2, 4, 6 o 100 líneas de código, va a "indentar" todo el código necesario. Para poder trabajar con esta librería será importante tener Node.js instalado en tu computadora. Con este tipo de herramientas, no hay pretexto para que tu código esté bien "indentado" en tu fase de desarrollo. Y esto obviamente a pesar de que, cuando tú ya vayas a entrar a una fase final de publicación de tu proyecto, tengas que juntar todo el código para optimizar recursos en el plano de ejecución.


4.4 Uso de punto y coma en JavaScript

El punto y coma es un símbolo que me permite saber en qué momento una instrucción está terminando, es decir, en qué momento estará terminando de ejecutarse o de declararse. Por ejemplo, en este caso, estamos declarando una variable y termina con punto y coma. Así, cada una de estas instrucciones. De hecho, en este caso tenemos una combinación entre comas y puntos y comas. Por ejemplo, esta que tiene un punto y coma o esta otra significan instrucciones que se van a ejecutar. En este caso, esta que tiene una coma significa separación entre parámetros. Es decir, parámetro uno, que en este caso es 'nombre', coma, parámetro dos, que es una función 'calcular', coma, parámetro tres, que es una función llamada 'saludar'. Pero cuando tú ejecutas una instrucción que se va a estar ejecutando expresamente, utilizamos el símbolo de punto y coma. Ahora, JavaScript no exige que escribas el punto y coma. Tu aplicación puede funcionar tengas o no tengas el punto y coma. Pero es una buena práctica para este lenguaje de programación que escribas siempre el punto y coma para que sepas en qué momento está terminando de ejecutarse una sentencia.


4.5 Abreviaturas en JavaScript

Cuando tengo mucho código y estoy haciendo interacciones continuas con el HTML, va a resultar conveniente utilizar algún tipo de abreviatura para poder entender las variables y el tipo de dato que este contiene. Por ejemplo, yo puedo tener una variable que se llame 'arrAnimales' y en la cual voy a asignar, para este caso, un arreglo. Con este nombre de variable, al utilizar esta abreviatura de inicio, no importa en qué parte del programa la utilice. Podré entenderla claramente, dado que la abreviatura que tengo al inicio es la palabra 'arr', que en este caso estamos haciendo la referencia a un arreglo. Del mismo modo, si tú trabajaras con un botón, por ejemplo, podríamos tener la abreviatura 'btn', que este 'btn' me indicaría que estamos trabajando con un botón. Supongamos ahora que trabajaremos con el botón Saludar. Si nosotros revisamos el HTML de este ejercicio, encontramos que tenemos un botón y que también tenemos un formulario. Para poder hacer estas dos variables, lo único que tengo que hacer es hacer la asignación y crear la variable ahora para el caso del formulario, que en este caso sería 'frm'. Donde entonces, cuando yo estoy trabajando a lo largo del programa, yo sabré que 'btnSaludar' es un botón, 'frmRegistro' es un formulario y 'arrAnimales' es un arreglo. Y este tipo de relaciones me ayuda a entender mejor el tipo de dato que está almacenando cada una de estas variables.


4.6 Comentarios en JavaScript

Escribir comentarios me permite entender mejor el objetivo de cada sección del programa que yo esté realizando. Para poder hacer comentarios hay dos maneras. Una de ellas es escribiendo doble diagonal. Esta doble diagonal me indica que es el comentario de una sola línea. Por ejemplo, en este caso yo puedo decir 'Se retorna el mensaje formado', puesto que lo que estoy comentando aquí es acerca de este retorno. O también yo puedo utilizar algún bloque de comentarios, es decir, yo puedo utilizar los siguientes caracteres: diagonal, asterisco y asterisco, diagonal. Con esto yo estoy indicando que todo lo que esté dentro de estos caracteres será un comentario. Este tipo de comentarios se conoce como comentario de bloque, y me sirve cuando yo quiero dejar escrito algún tipo de instrucciones que me va a ocupar más de una sola línea. Si trabajas con Sublime, puedes utilizar el juegos de teclas Cmd + Shift + 7 para poder hacer comentarios de manera automática. Por ejemplo, yo voy a escribir por aquí algún par de palabras: 'Pruebas'. Y tengo cuatro renglones. Pero supongamos que esto es un comentario que me va a ayudar a posterior entender mejor este código. Es decir, yo puedo regresar un par de meses, o tal vez años, a este código y voy a poder entenderlo gracias a los comentarios. Si yo quiero comentar todo esto, simplemente lo selecciono. Si estoy en Mac, pulso el juego de teclas Cmd + Shift + 7 y, si estoy en Windows, pulso es juego de teclas Ctrl + Shift + 7, y esto automáticamente va a comentar todo el código. Vean que los comentarios que realiza son comentarios de línea. Pero también yo puedo basarme en algún tipo de documentación, como puede ser JSDoc, donde me permite a mí tener comentarios específicos sobre la función que yo esté declarando. Por ejemplo, en la función 'saludar' yo puedo escribirlo de la siguiente manera. Utilizando un comentario de bloque, yo puedo escribir aquí, en este caso, la descripción de la función, que es una función para enviar saludos. Y puedo escribir, por ejemplo, el tipo de parámetro que estará recibiendo. en este caso voy a utilizar el siguiente: voy a escribir la palabra 'type', puesto que en esta documentación de este estándar sobre cómo hacer documentación –vamos a escribirlo, por ejemplo, "@type"– y el 'type' me dice el documento del tipo de objeto que estemos trabajando, o puedo utilizar también el parámetro para saber cuál es el parámetro que voy a utilizar. en este caso vamos a cambiarlo. No usemos 'type', utilizaremos 'param' para poder indicar que va a estar recibiendo un parámetro. Y este parámetro será un 'string' que tendrá el nombre, y será entonces 'Nombre de la persona a saludar'. Esto obviamente me da una gran ventaja, puesto que posteriormente, utilizando las configuraciones necesarias que me indique JSDoc, yo voy a poder generar una documentación de manera automática en HTML para poder documentar toda mi aplicación. También existe una librería llamada DocBlock, donde esta librería va a ser muy sencilla de instalar y me va a permitir generar estos comentarios de una manera automatizada y muy rápido. Para poder instalarlo, yo necesito utilizar el instalador de aplicaciones de Sublime. Utilizo el control de aplicaciones para instalar, espero un poco de tiempo en lo que se cargan todos los repositorios y, una vez que los repositorios están cargados, voy a buscar DocBlock. Al buscarlo, lo voy a encontrar, y me dice: "Simplifica la escritura de comentarios en JavaScript y otros lenguajes como PHP, CoffeeScript, ActionScript". Voy a dar doble clic para que esto se instale y ya voy a tener disponible, de manera automática, la generación de ese tipo de documentación, donde, simplemente con escribir '/**', y pulso la tecla de tabular, automáticamente me genera la documentación. Vamos a repetir el paso: escribo '/**', pulso el tabulador y, en ese momento, vean como me está indicando primero que hay tres parámetros que recibe, dado que aquí hay tres parámetros indicados. Del mismo modo, me indica un retorno, porque ya detectó también que hay algo que está regresando. Entonces esto va a facilitar este trabajo. Del mismo modo se puede hacer cuando tenemos una variable. Por ejemplo, vamos a documentar esta variable llamada 'nombre', donde igual voy a utilizar el mismo truco: '/**', pulso la tecla de tabulador y automáticamente me aparece aquí la estructura que va a llevar esta documentación. Al principio me aparece 'nombre description', es decir, la descripción de esta variable, y el tipo de dato que es ya me lo está detectando casi de manera automática. Como ven, documentar no es complicado y, con ese tipo de herramientas, me va a facilitar mucho este proceso, además de que estoy colaborando para que al final pueda yo generar la documentación necesaria en HTML de mi aplicación.


4.7 Uso de comillas en JavaScript

Las comillas me permiten trabajar y agrupar cadenas de texto. Tenemos dos tipos de comillas: las comillas dobles y las comillas simples, pero ambas pueden interactuar; solo hay que tener cuidado con un par de cosas. La comilla con la que se comienza es con la que se termina. Es decir, si yo comienzo mi agrupado con una comilla doble, termino con una comilla doble; si comienzo con una comilla simple, termino con una comilla simple. Veamos un ejemplo de esto. Voy a declarar una variable llamada 'mensaje', donde voy a enviar primero un par de comillas dobles y voy a indicar aquí el mensaje "La actividad estuvo divertida". Pero yo puedo marcar en comillas simples la palabra 'divertida'. Vean lo siguiente: estoy comenzando con comilla doble y estoy terminando con comilla doble, pero en medio estoy utilizando una comilla simple. Pero no importa, aquí comienza y aquí termina. Lo que yo no puedo hacer es esto: comenzar con comilla doble y terminar con comilla simple, porque esto derivaría en algún error. Vamos a ver como se muestra esto en consola ('console.log') y mandamos el mensaje. Al probarlo vemos como la comilla se interpreta como si fuera una cadena de texto, y es lo que se manda a imprimir. También podemos hacer una variante de este. Por ejemplo, vamos a crear ahora otra variable llamada 'mensaje'. en este caso vamos a ponerle 'mensajeCompleto' y vamos a utilizar la versión contraria. Yo comienzo y termino con una comilla simple. Pero vean, aquí estoy utilizando ambas comillas dentro y fuera de la cadena de texto, por lo cual, cuando yo vaya a ejecutar este tipo de contenidos, me va a derivar en un error, porque no hay ninguna variable que se llame 'divertida', o algún símbolo de concatenación o algo que me indique que voy a trabajar con este valor. Por lo cual, simplemente procedo a cambiar estas comillas por unas comillas dobles. Así, cuando yo vaya a enviar a consola el mensaje como lo estoy haciendo ahora, esto va a mostrarse de la siguiente forma: mostrará una comilla doble donde esté trabajando. Pero insisto nuevamente: comenzamos con una comilla simple, terminamos con una comilla simple. La idea es que nosotros podamos trabajar primero con comillas simples por dentro y comillas dobles al final. Y así entonces puedo tener sentencias trabajadas con cadenas de texto bastante más complejas, pero que aún así se van a poder mostrar correctamente en pantalla, y podré hacer los cálculos que yo necesite dependiendo de la actividad.


4.8 Uso de JSLint

JSLint es un servicio que me va a permitir a mí validar mi código contra reglas establecidas y poder así generar un código limpio. Veamos como funciona. en este caso yo tengo un código de JavaScript, lo voy a pegar directamente en este campo de texto y voy a pulsar el botón JSLint. Esto va a correr ciertas reglas que están cargadas en la aplicación y me va a indicar cosas que yo debería estar haciendo. Por ejemplo, me indica que hay un espacio que está esperando entre la declaración de la función y un paréntesis, y esto me aparece en la función 'calcular'. Veamos. Yo tengo la función 'calcular' y aquí tengo la palabra reservada 'function'. Doy un espacio, vuelvo a pulsar JSLint y ya no me aparece. Con eso ya estoy corrigiendo yo estos elementos. Aunque a veces JSLint puede dar varios falsos positivos, así que hay que tener mucho cuidado con esto. El uso de esta herramienta debe ser prudente. Podemos utilizarla a modo de consejo sobre nuestro código fuente y no como reglas estrictas. Si la utilizamos como reglas de nuestro código fuente, nos puede ayudar a tener un código más estructurado. Es importante indicar que las reglas de este servicio fueron definidas por Douglas Crockford, evangelista de JavaScript y creador de la primera especificación de JSON, que es el formato para el intercambio de datos con JavaScript. Él, a través de la práctica que ha tenido, logró establecer este tipo de reglas que me pueden ayudar a tener un código mucho más limpio y bastante más legible.


4.9 PRUEBA PENDIENTE - 9 PREGUNTAS



5. ORGANIZACIÓN DE CÓDIGO DE JAVASCRIPT

5.1 Elimina consultas innecesarias en JavaScript

A veces solo basta poner un poco de atención en nuestro código para que podamos evitar consultas innecesarias, ese tipo de consultas que van a consumir recursos de una otra manera de nuestros dispositivos. Así sea un recurso mínimo, siempre es importante procurar ahorrar lo más posible. Por ejemplo, veamos en este caso. Este código es para la carga de la página web, donde tenemos la función 'window.onload' y estamos declarando que, cuando ya tiene cargada toda la página, ejecuta esta función, donde nosotros vamos a estar asignando el botón Saludar al evento 'click', y poder reaccionar en consecuencia. Pero aquí hay algo que nosotros podemos evitar, y eso es este 'windows.onload'. Por ahora, cuando yo lo ejecuto, todo funciona correctamente. Por ejemplo, aquí ha cargado la página, yo ya pulso el botón Saludar y ya me aparece el texto "¡Hola Mundo!". Pero veamos lo siguiente: ¿qué sucede si yo no quiero utilizar este 'window.onload'? Voy a comentar las líneas que afectan a ese 'window.onload' y vuelvo a cargar mi página. Cuando yo la cargo, me aparece un error que me dice que hay una referencia que no se ha podido leer bien. Es decir, no se ha podido agregar un 'addEventListener' a algún objeto. ¿Por qué? Porque simplemente el objeto del botón todavía no ha sido detectado. ¿Cuál es el truco aquí? Generalmente nosotros escribimos en la parte superior la carga de los "scripts". Lo único que tenemos que hacer es bajarlo, previo cierre de la etiqueta 'body', para que nosotros podamos detectar que ya cargó todo lo demás. Así, vuelvo ejecutar nuevamente mi código, vuelvo a probar y vemos que ya no me está saliendo ningún error. Pruebo el clic del botón y todo funciona correctamente. ¿Que sucedió aquí? Simplemente estamos evitando ahora utilizar ya 'window.onload'. Por tanto, estamos optimizando el uso de los recursos del dispositivo con un simple movimiento de en qué momento se está cargando el "script". De hecho, es una muy buena práctica que todos los "scripts" se carguen siempre hasta abajo, es decir, que sea lo último que cargue. ¿Para qué? para que nosotros ya tengamos definido todos los componentes de HTML con los que podamos llegar a trabajar directamente desde nuestro JavaScript.


5.2 Archivos separados en JavaScript

Siempre será importante mantener bien organizado nuestro código, puesto que generalmente vamos a ocupar muchísimos archivos, tanto de JavaScript como de Cascadas de Estilo, como de HTML, por lo que resulta muy conveniente que nosotros hagamos una separación adecuada y tengamos una carpeta exclusiva para trabajar con CSS, una carpeta exclusiva para trabajar con JavaScript y una carpeta exclusiva donde estaremos agregando todas las librerías que lleguemos a utilizar, librerías que tengan que ver con CSS o librerías que tenían que ver con JavaScript. Por ejemplo, si vas a trabajar con Angular o con jQuery o alguna otra librería relacionada con alguna de las dos herramientas, tendrán que ir directamente en esta carpeta llamada 'libs'. Así nosotros vamos a mantener siempre separado todo el código. Incluso también es una muy buena práctica que tú puedas tener una separación para todas las imágenes que vayas a cargar. Con esto nosotros, entonces, podemos garantizar lo siguiente: que el código de JavaScript que vamos a estar trabajando se va a trabajar de manera independiente. Y eso lo podemos ver claramente aquí, puesto que todo el JavaScript está agregado en el archivo 'app.js', donde yo, al abrirlo, voy a poder agregar todo el código de JavaScript. Así no tengo ninguna dependencia en el archivo de HTML y, si la llegara a tener, deberá de ser un caso muy específico para poder hacerlo. Mientras tanto, todo movimiento que yo quiera hacer y trabajar sobre el código de JavaScript que afecte a mi aplicación tendrá que ir directamente al archivo 'app.js'. Como ven, tener separados todos los archivos me va a permitir que estos estén modularizados. Así yo tendré espacios para trabajar independientemente. Además, también me permite un fácil mantenimiento, pues puedo acceder directamente a lo que necesite. Si quiero trabajar con la estructura de mi aplicación, tendré que acceder al HTML. Si quisiera trabajar con la vista de la aplicación, puedo trabajar el CSS. Y si quiero trabajar con aquello que le va a dar vida a la aplicación e interactividad, entonces accedo donde encuentro mi archivo de JavaScript.


5.3 Evitar la duplicidad en JavaScript

En muchas ocasiones, en nuestro código, nos daremos cuenta de que estamos utilizando muchas instrucciones repetidas. Cuando caigamos en esta situación, es momento de trabajar con funciones, es decir, encapsular todas estas acciones en un solo objeto que yo pueda estar reutilizando después. Por ejemplo, en este caso yo estoy invocando regularmente una operación de suma, con lo cual entonces se me facilita a mí más crear una función 'suma' que reciba un par de parámetros, por ejemplo, 'datoA' y 'datoB', y que adentro se genere un cálculo. Ese cálculo lo vamos a guardar en una variable llamada 'resultado', que va a almacenar 'datoA + datoB'. Y posteriormente simplemente lo voy a retornar. Con esto lo único que tendré que hacer cada vez que lo necesite es invocar el dato. Por ejemplo, si yo quisiera trabajar con una nueva cuenta, lo único que tendría que hacer es invocar a la función 'suma' y enviarle los datos con los cuales yo desee trabajar. Así también las invocaciones pueden resultar algo más complejas. Por ejemplo, yo puedo hacer unas invocaciones donde tenga más llamadas a esta función. Hagamos la siguiente variable, que se llame 'cuentaFinal'. Aquí adentro, 'cuentaFinal' va a hacer una suma. Nosotros sabemos que 'suma' recibe dos parámetros, el 'datoA' y el 'datoB'. Pero esos datos pueden ser el resultado de otra suma. Aquí nosotros estamos accediendo a un nivel de complejidad más alto, pero vean lo fácil que va a resultar hacer este tipo de cosas. Yo podría bien crear una variable y almacenar el dato, pero vamos a integrarlo aquí mismo. Yo voy a decir: suma de 2 y 3, coma, y suma de 20 y 45. Vamos a mostrarlo en consola. Y aquí lo que me va a mostrar es, primero, el resultado de suma de 2 y 3, que en este caso serán 5, y el resultado de la suma de 20 y 45, que en este caso son 65. Por tanto, se resolverá primero esta operación, posteriormente esta y posteriormente los valores que queden, que al final es como si yo tuviera de resultado la suma de 5 y 65, que derivaría en 70. Veamos si esto es correcto. Voy a ejecutar mi aplicación y, cuando la ejecuto, en la línea 7 me manda un texto que dice "70" y en la línea 19 me manda otro idéntico. El de la línea 7 es un cálculo que se hizo utilizando independientemente cada una de las operaciones, y en la línea 19 es el cálculo que se hizo simplemente con una función. Así yo, a lo largo de ese programa, voy a poder invocar a la función 'suma' tantas veces como yo necesite. Así no voy a estar haciendo el cálculo regularmente, es decir, no tendré que estar escribiendo cada vez que necesite los números y realizar la operación directo. Lo único que tengo que hacer es tomar los valores y enviarlos a una función que ya se dedica a realizar esta tarea.


5.4 Eventos y HTML en JavaScript

Muchas veces nos vamos a encontrar en la situación donde necesitemos interactuar elementos de HTML con código JavaScript. Por ejemplo, en este caso tenemos un botón y, cuando yo quiero hacer la interacción entre HTML y JavaScript, muchas veces simplemente voy a escribir aquí adentro el método 'onclick' y la función que yo vaya a hacer adentro. Supongamos que exista una función llamada 'saludar', desde aquí la estoy invocando. Pero aquí tenemos un detalle: estamos haciendo, solamente con esta declaración del atributo, que dependamos directamente de un JavaScript para que se pueda ejecutar este archivo. Es decir, la dependencia aquí es bastante alta y necesitamos evitar eso. Para poderlo evitar, vamos a hacer lo siguiente: vamos al archivo 'app.js' y, aquí adentro, yo podré trabajar con mi código. Veamos que el ID de mi botón es 'btnSaludar'. Vamos a crear una variable con el mismo nombre para no confundirnos y vamos a utilizar el método 'getElementById' del objeto 'document'. Entonces escribamos 'document .get ElementById' y mandemos de parámetro, entre comillas, el nombre del ID que yo quiero buscar, que en este caso hicimos que coincidiera con el nombre de la variable para no perder una referencia lógica. De hecho, yo puedo llamar a esta variable de cualquier otra forma, no hay ningún problema, pero manteniendo esto me hace una coherencia a mí y es más fácil que yo pueda comprender mi propio código. Una vez que ya tengo esta asignación hecha, vamos a escribir de nueva cuenta el nombre de la variable, que es 'btnSaludar', y vamos a agregar un 'listener': 'addEvent Listener'. Es decir, vamos a agregar un elemento que esté escuchando siempre este botón, y este botón siempre va a estar escuchando un evento llamado 'click'. Así yo también puedo definir cualquier otro tipo de evento concerniente que puede escuchar este botón. Y, posterior, aquí tendré que declarar una variable. Para esto vamos a declarar una variable anónima, donde lo único que voy a tener que hacer es escribir 'console.log', y enviemos el siguiente mensaje: "¡Hola, mundo!". Veamos cómo funciona esto. Cargo en mi navegador el ejercicio y hago clic en el botón Saludar. Esto me va a mostrar en la consola el texto "¡Hola Mundo!" y, si lo vuelvo a repetir varias veces, en lugar de que se imprima tantas veces yo he pulsado el botón, simplemente me va a aparecer un número antes de ese texto indicándome cuántas veces he pulsado dicho botón. Con esto ya tengo una relación entre un elemento de HTML y un elemento de JavaScript.


5.5 Bloques explícitos de funciones en JavaScript

Al trabajar con JavaScript y algunas estructuras de control, como lo es el 'if', vamos a trabajar nosotros generalmente con algunas formas abreviadas. Es decir, a veces no es necesario, como en este caso, estar indicando el uso de llaves. Yo simplemente, con que escriba esta sentencia, me va a detectar que si el estado, en este caso, cumple la condición y es un valor positivo, va a mostrar en consola el valor "avanzar". Pero ojo, esto solamente aplica cuando trabaja con una sola línea. A veces yo puedo confundir esto y agregar más acciones. Supongamos agregamos una variable nueva que se llama 'resultado' y le asignamos un valor. Pareciera que realmente lo que estamos diciendo es: "Si el estado cumple la condición de ser un valor positivo, entonces va a ejecutar estas dos cosas". Pero la realidad es que no es así, puesto que esta forma abreviada de la estructura 'if' solamente va a considerar la primera línea; para la segunda no la va a tomar en cuenta. Prácticamente esto es como si yo escribiera lo siguiente: 'if(estado'), entonces 'console.log' con el texto "avanzar". Y fuera de la estructura ahora sí, vamos a enviar la variable 'resultado'. Vemos como obviamente esto está fuera. Escribir este código de esta manera es completamente idéntico a esta otra forma, porque de nuevo la estructura 'if', al momento de que yo estoy trabajando de esta manera abreviada, solamente va a considerar la primera línea.


5.6 PRUEBA PENDIENTE - 5 PREGUNTAS


6. PERFORMANCE EN JAVASCRIPT


6.1 Usa JSON

Trabajar con datos cuando estamos desarrollando una aplicación con JavaScript es una tarea sencilla cuando utilizamos JSON. JSON, como sus iniciales indican, "JavaScript Object Notation", es un formato para el intercambio de datos. Básicamente JSON va a describir la información que nosotros queremos utilizar. JSON nació como una alternativa a XML, el cual es más lento dada la cantidad de etiquetas que se tienen que parsear e imprimir cuando nuestra aplicación se está ejecutando. Así que, si aún estás utilizando XML, es momento de cambiar ya. JSON trata los datos como objetos, por lo que la implementación con JavaScript es más sencilla, rápida y transparente. Lo que estamos viendo ahora en el archivo 'productos.json' es, tal cual, un archivo donde tenemos localizado un objeto de datos con este formato. Lo que vamos a hacer en este ejercicio es aprender a cargar esta información y a utilizar JSON, ya que, además, por la forma en cómo está estructurado JSON y la compatibilidad que tiene con JavaScript, hace que este tipo de comunicación mejore el "performance" y la rapidez con la que nuestra aplicación va a estar actuando. Para esto vamos a utilizar nosotros jQuery. Así que incluimos en nuestra lista de "scripts" los códigos del CDN –que CDN significa "Content Delivery Network"– de jQuery. Es todo lo que hacemos en el archivo 'index.html'. También vamos a necesitar un servidor web. en este caso tenemos implementado un servidor en PHP localmente instalado. Esto puesto que todas las comunicaciones que vamos a utilizar para traernos datos de un archivo externo requieren de peticiones HTTP utilizando AJAX para poder tener esta comunicación y, si no nos encontramos en un ambiente de cliente-servidor, entonces no vamos a poder hacer esta comunicación. Vamos directamente a nuestro archivo 'app.js'. En este caso, lo primero que vamos a hacer va a ser utilizar un objeto del que dispone jQuery, llamado 'getJSON'. Este objeto 'getJSON' se va a comunicar con el archivo y lo va a traer para que podamos utilizar todos los datos. En este caso, va a recibir como primer parámetro el archivo donde tenemos todos nuestros datos, que es 'productos.json'. Así que, entre comillas, pasamos el nombre. El segundo parámetro será donde le tendremos que indicar qué va a hacer con los datos que haya traído. Para este caso vamos a trabajar con una función anónima, así que crearemos directamente aquí la función y reaccionaremos con los datos que el método 'getJSON' haya traído. Para este caso también, cuando 'getJSON' actúa y se trae toda la información que existe en este archivo, va a colocarlos en una variable. Esa variable yo le puedo definir el nombre que yo quiera, y la vamos a pasar como parámetro a la función anónima para poder recuperar todos los datos de ese archivo. En este caso, colocaremos el nombre de 'productos'. Así todos los datos van a estar en esa variable. Vamos a comprobar, enviando toda la información a consola, que realmente todos los datos se estén cargando correctamente. Vamos a nuestro navegador, actualizamos y vemos como, efectivamente, me ha regresado un arreglo de objetos, el cual yo, al expandirlo, me va a indicar que son todos los elementos que contiene nuestro archivo de JSON. Entonces todos los datos aquí están cargándose correctamente. De hecho, yo podría también hacer un ciclo 'for' para poder acceder a cada uno de esos elementos, para lo cual primero vamos a generar una variable que se llame 'totalProductos' para poder almacenar ahí la cantidad de productos que llegue a haber en el archivo, es decir, el tamaño que va a tener el arreglo, porque esta variable, al final de cuentas, llegó como un arreglo de objetos. Entonces, el 'totalProductos' será igual a 'productos.length'. Con esto ya vamos a tener nosotros, en la variable 'totalProductos', el tamaño de ese arreglo, y ahora podemos trabajar con un ciclo 'for'. Aquí solamente vamos a reemplazar por la cantidad de productos, y esto va a comenzar a hacer la iteración. Vamos a comprobarlo enviando todo a consola. Y ahora directamente vamos a imprimir los datos que hay en 'productos', en la posición que me indique el índice que está siendo afectado por el ciclo 'for', y utilizando la propiedad que yo quiera, que en este caso la única propiedad que dispone en JSON es 'nombre'. Así que, entonces, yo agrego aquí esa propiedad 'nombre'. Vamos a probarlo y esto debería de imprimirme en esta sección solamente los nombres. Vamos a actualizar y efectivamente ha funcionado de una manera correcta, donde solamente ya tengo acceso a los datos de esta propiedad. Una de las ventajas de trabajar con JSON es la popularidad que tiene este tipo de formato. Tan popular, que se ha vuelto un estándar en el mundo de los desarrolladores para poder transmitir datos entre distintas aplicaciones. Por ejemplo, podemos revisar un API del clima, donde este API del clima me puede regresar un JSON y, de hecho, este API contiene una consola donde yo puedo armar mi propia consulta. en este caso yo estoy haciendo una consulta para saber el clima que hay en Santo Domingo. Y ahora, cuando yo lo genero utilizando el botón JSON , aquí abajo me aparece la URL. Voy a copiar esta URL y voy a regresar a mi archivo. Vamos a cambiar ahora la fuente de los datos. Vamos a colocar que la información de ahora esté directamente en un lugar remoto. Para esto, lo primero que voy a hacer será duplicar la primera línea y comentar la anterior para que tengamos eso de respaldo. Ahora simplemente voy a reemplazar el archivo que estaba cargando previamente y aquí voy a colocar la URL. Igual, mantengo la URL dentro de las comillas. Sí, esto se vuelve algo muy grande. De hecho, podríamos hacer lo siguiente: podríamos declarar una variable llamada 'url' y aquí adentro podemos almacenar toda la URL. Así simplemente, cuando yo vaya a invocar el JSON paso como dato la URL y no tengo una función tan grande. Con esto entonces vamos a hacer la prueba. Vamos a comentar primero este ciclo que no estaremos utilizando y vamos a imprimir en este caso los productos, que estos productos van a resultar ser todos los datos del clima que van a venir desde el servicio del clima. Actualizamos el navegador y con esto vemos. Tomó un poco de tiempo porque tuvo que ir a un servidor remoto y traerse todos los datos. Y una vez que lo tiene, aquí tenemos el "query", la fecha en que fue creado este bloque de información y los resultados. Dentro de cada uno de los resultados, vamos a poder ver toda la información por completo: información del cielo, a qué hora pone el sol, a qué hora sale, una descripción de cuál es el clima que nosotros estamos viendo, cuál es la temperatura actual, cuál es la humedad, la presión, etc. Toda la información relacionada precisamente con el clima de Santo Domingo acorde a la consulta que nosotros pudimos armar dentro del API del clima. De esta manera es como nosotros podemos, entonces, conectarnos a cualquier fuente de información que esté utilizando JSON. Como vieron, no fue absolutamente nada complicado conectarme a un servicio externo. Por lo cual, JSON es un formato que me va a permitir tener esta versatilidad sin ningún problema para poder tener interacción e intercambio de información entre distintas aplicaciones web.


6.2 Join versus Concat

Los arreglos de JavaScript poseen métodos que nos van a facilitar mucho la vida. En algunos de estos casos nosotros necesitamos, por ejemplo, hacer una concatenación de los elementos de un arreglo. Por ejemplo, si yo quisiera unir todos esos elementos, yo podría utilizar el método 'join'. Para esto vamos a crear una variable nueva que se llame 'listaAnimales'. Y esta variable, lo que vamos a hacer, es guardar ahí el resultado del 'join'. Lo que estoy diciéndole es que vaya a hacer una unión de los elementos que existan en 'animales' utilizando una coma. Veamos cómo se muestra esto. Vamos a mandar a consola la lista de animales. Actualizamos nuestro navegador y vemos como ya me aparecen aquí todos los elementos que pertenecían al arreglo, pero separados por una coma. Ahora podrás encontrarte tal cual que los arreglos también disponen de un método llamado 'concat', que sirve para concatenar, y esto puede causar un poco de confusión. Y ojo con lo siguiente: vamos a crear una nueva lista de animales ('var nuevaLista'), a la cual vamos a asignarle igual los animales, pero utilizaremos el método 'concat' para que haga una concatenación. Vamos a mandar también a consola esta nueva lista y veamos qué sucede. Me cambio a mi navegador, actualizo y vean qué gran diferencia: primero, cuando trabajamos con 'join' pudimos hacer uso del carácter coma para separar todos los elementos. en este caso no pudimos hacer uso de ninguno, puesto que, si yo utilizaba aquí, en la concatenación, el elemento coma, lo que sucedía es que ese elemento se agrega. ¿Y qué sucede además? El resultado de la operación 'join' es una cadena de texto, mientras que el resultado de la operación 'concat' es un arreglo. Entonces esto nos puede presentar ciertas dificultades al momento de querer administrar los contenidos que estoy trabajando con ese tipo de operaciones. Veamos, por ejemplo, qué sucede con 'listaAnimales', veamos qué tipo es. Yo puedo aquí escribirle 'typeof' para saber cuál es el tipo de dato de animales, y puedo hacer lo mismo para saber cuál es el tipo de dato de 'nuevaLista'. Guardamos y actualizamos el navegador, y vemos como el primero me está indicando que es un "string", o una cadena de texto, y el segundo me indica que es un objeto, que yo puedo perfectamente entender como un arreglo por la forma en que la cual está descrito. En resumen, utilizar el método 'join' de los arreglos para unir todos los elementos que lo componen en una sola cadena de texto es muchísimo más eficaz que trabajar con el método 'concat', que me estará regresando un arreglo. Ojo, si tu objetivo es obtener los datos separados de ese arreglo o estar agregando más elementos, entonces 'concat' es tu método. Pero al final, si tú lo ves, nos sigue regresando un mismo tipo de dato.


6.3 Pruebas de rendimiento de JavaScript

Regularmente comenzamos a escribir el código y a veces lo hacemos ya de una manera tan automática que simplemente no nos damos cuenta de si estamos impactando o no en el "performance" de nuestra aplicación con ciertos bloques de código. Por tanto, es muy recomendable medir el "performance" de toda línea que nosotros estemos ejecutando. Para esto vamos a utilizar la consola, pero vamos a trabajar con un método que se llama 'time'. Vamos a enviarle una etiqueta, que en este caso la etiqueta será 'myCode'. Esa etiqueta puede ser el nombre que nosotros queramos. De hecho, si tú quieres poner algún nombre como 'revisión', lo podemos llegar a utilizar. Este tipo de elementos va a cerrar con un 'timeEnd'. ¿Qué es lo que va a suceder aquí? Vamos a levantar, como tal, un "timer" y la consola se va a encargar de medir cuánto tiempo tarda en ejecutar este código. Entonces yo voy a poder validar este tipo de ejecuciones. Vamos a probarlo en el navegador. Actualizamos y listo. Me dice aquí: "revisión 1,186 ms". Quiere decir que la ejecución de este código tarda 1,186 ms. En teoría, si yo tengo código similar repetido, va a seguir tomando el mismo tiempo. Esto me ayuda, obviamente, a optimizar mi código y ver de qué partes del código puedo llegar a prescindir y de cuáles no o, en su defecto, cuáles puedo modificar. Esto funciona en varios "browsers", pero ojo, va a sufrir distintos tiempos dependiendo del "browser". Veamos, por ejemplo, qué sucede con Firefox. Voy a cargar aquí mi archivo, actualizo el navegador y en este caso me dice "revisión: temporizador comenzado", y tomó 1,6 ms, que hay un cambio. Como vemos, en este caso con Google Chrome está trabajando con 1,186 ms, que es algo muy distinto a este tiempo. Y este cambio se debe precisamente al motor de "rendereo" de cada uno de los navegadores. Porque, recordemos, cada motor de "rendereo" lo hace de la manera adecuada a cómo el fabricante lo está haciendo. Es decir, Google trabaja de una manera, Firefox trabaja de otra, Apple trabaja de otra, Microsoft de otra, etc. Entonces, por tanto, debemos tener cuidado y deberíamos realizar este tipo de pruebas de rendimiento en varios "browsers". Esto con el objetivo de que nosotros podamos llegar a una media, también verificando cuánto tiempo tarda en ejecutarse según sea el "browser". Algo también muy importante es la etiqueta con la cual comenzamos y con la cual cerramos. Si yo comienzo la etiqueta con 'revisión', terminaré con 'revisión'. No puedo terminar con otra cosa, por ejemplo 'revisión final', porque automáticamente estas dos etiquetas ya no son las mismas. Así que la podemos regresar a su estado inicial y siempre la etiqueta con la que se inicia es la etiqueta con la que se termina. Y no solamente puedes hacerlo por un bloque pequeño de código, también puedes hacerlo por todo el código completo de tu página para que veas cuánto tiempo te llega a tomar la ejecución de ese desarrollo. Aunque es recomendable que puedas dividirlo por bloques de acción dependiendo de los objetivos de tu aplicación y hagas esta prueba de "performance" acorde a cada acción que vaya a estar realizando tu aplicación web.


6.4 Minificar código de JavaScript

Minificar el código es una práctica que se ha vuelto muy popular y no solamente porque haga que el código cambie, sino porque esto me permite a mí tener un código bastante optimizado y que la ejecución sea mucho mejor. Por ejemplo, cuando yo cargo o utilizo un código de JavaScript que está minificado, ese tipo de códigos no va a incluir espacios en blanco, saltos de línea, etc. De hecho, cuando tú ves un código que aparece que está todo en línea seguida y que no hay ningún espacio y que no da apertura para poder leerlo, es cuando decimos que este código esta minificado. Las ventajas de tener este código minificado apuntan en primera instancia hacia el "performance" de la ejecución, es decir, el tiempo que va a tardar en cargar y en ejecutarse cada una de las líneas de código que yo haya desarrollado. En Internet existen muchísimas herramientas para poder hacer compresión de código. Tú puedes utilizar la que más te ayude y la que más te acomode. en este caso utilizaremos un servicio llamado 'jscompress.com'. De hecho, puedes tú también instalar alguna desde el "Node Package Manager" y, a partir de eso, hacer la minificación de tu código directamente en línea de comandos. O si estás montado con algún tipo de "framework", también generalmente hay muchos "frameworks" que traen ya preinstaladas y preconfiguradas todas las cosas que hay que hacer para poder hacer la minificación y que tu código siga funcionando sin ningún problema. Otra de las ideas de que tengas el código minificado es que puedas, tal cual, no entenderlo. Es decir, simplemente a veces queremos tener una cierta capa de seguridad que, aunque no es seguridad per se, pero sí brinda un poco de dificultad para que otro usuario puede entender lo que está pasando en ese archivo de JavaScript. Veamos cómo vamos a minificar entonces código. Voy a mi archivo 'app.js' y vamos a copiar todo este código. De hecho, lo cortamos, y solamente vamos a dejar vigentes las notificaciones en consola. La idea de tener estas notificaciones en consola es para validar que, aún minificado el código, esto va a funcionar correctamente. Vayamos a ver ahora. Lo único que tengo que hacer es pegar este código en el cuadro de texto que me ofrece este servicio y pulsar el botón Compress Javascript. Esto me va a indicar un estatus, un porcentaje de compresión y cuánto espacio se ha logrado ahorrar. En este caso, dado que solamente eran unas cuantas líneas de código, obviamente el espacio ahorrado fue muy poco, pero hubo un espacio ahorrado. Y este espacio ahorrado, vean las diferencias: no hay espacios en blanco, no hay saltos de línea y, recordemos, cada espacio en blanco, cada salto de línea, es algo que también interpreta la computadora, y esto obviamente genera una carga en memoria. Vamos a copiar todo este código y vamos a pegarlo nuevamente en nuestro archivo. Vean como todo esto quedó absolutamente en una sola línea. Y vamos también a identificar algo: hay algunos parámetros que han cambiado el nombre. Por ejemplo, la función 'calcular' ahora recibe el parámetro 'a' el parámetro 'n'. Voy a regresar un poco sobre los pasos con Ctrl + Z, o Cmd + Z si estás trabajando con Mac, y vemos como los parámetros estaban nombrados anteriormente con 'costo1' y 'costo2'. Y una vez que fue minificado el código, estos parámetros cambiaron. ¿Qué sucede? Vamos a tener entonces dos acciones: la acción de minificar y la acción de ofuscar el código. Primero validemos que esta acción de minificar haya funcionado correctamente. Voy a guardar y voy a abrir mi archivo directamente en el navegador. Actualizo y efectivamente se ejecutan los tres mensajes, donde tengo 'tienda.nombre', donde ejecuto el método 'calcular' con los parámetros 20 y 32 y donde ejecuto el método 'saludar'. Entonces aparecen estos tres mensajes, lo que quiere decir que el proceso de minificación se ha ejecutado correctamente y sin ningún problema. También, en este servicio de JSCompress, tú puedes subir tus archivos. Es decir, si tú ya lo hiciste, no es necesario que estés copiando y pegando, subes completamente tu archivo. Te recomiendo que dependiendo de la sensibilidad del código que estés utilizando, si no es algo tan sensible, entonces puedes subirlo y utilizar este tipo de servicios. Pero si es código bastante sensible, lo que te recomiendo es que instales y configures un minificador de código directamente en tu computadora y hagas ese proceso ahí para evitar que este código pueda llegar a estar en algún lado sin que nosotros sepamos qué haya sucedido. Ahora revisemos qué sucede con el siguiente paso. Hasta aquí ya teníamos el código minificado sin ningún problema, todo aparece en una sola línea. Pero aquí hay un detalle: hubo cambios en los nombres. Eso ya no entra dentro del proceso de la minificación, eso es otro proceso que se llama ofuscación del código, que significa que van a cambiar algunos nombres de variables para que estos no entren en conflicto con algunas otras cosas. Es decir, se cambian los nombres de variable, pero estos no entran o no chocan con algunas otras variables que estén declaradas en algunas otras librerías. Recordemos que no siempre trabajamos con una sola librería, podemos trabajar con muchas más, y esto nos puede limitar obviamente en ciertas situaciones. Veamos. Voy a regresar un poco de nuevo en el código, voy a copiar y acortar nuevamente toda la estructura que yo tenía y me voy a dirigir a otro servicio que se llama JavaScript Obfuscator. Este servicio de JavaScript Obfuscator es, como tal, el servicio para poder hacer esta ofuscación del código. De este lado voy a reemplazar el código que me aparece aquí de ejemplo y voy a pegar el código que yo estuve trabajando. Una vez que ya lo tengo aquí pegado, yo puedo trabajar con algunas opciones. Si no deseo tener aquí alguna opción, simplemente pulso el botón Obfuscate. Esto, vean, me regresa aquí el código ofuscado. Como ven hay muchísimos cambios. Hay incluso datos que no se van a poder entender, puesto que sufren muchísimos cambios, pero esto sigue funcionando también sin ningún problema. Vamos a copiar todo esto y vamos a pegarlo en nuestro código. Veamos como también hay palabras que sí llegamos a reconocer, como 'función' y 'consola', pero todas las demás ya tienen otra expresión en hexadecimal. Ahora que ya tengo listo esto, voy a guardar y vamos a probar nuevamente. De hecho, para ver que tengamos un cambio, vamos a mandar un nuevo mensaje a consola que diga "Nuestro código ha sido ofuscado". Y ahora sí, vamos a probarlo. Actualizo y vean: me aparece el mensaje que yo acabo de agregar, y las invocaciones a las propiedades y métodos existentes siguen prevaleciendo, lo que significa que esta ofuscación ha funcionado correctamente. De hecho, este último ya fue un proceso de ofuscación y minificación. Y para ese tipo de cosas también es altamente recomendado que revises la sensibilidad de información que estarás trabajando con tu código. Y, dependiendo de esto, ya sea que instales un servicio en tu computadora para hacerlo localmente o, que si no es tan sensible, puedas hacerlo completamente en línea.


6.5 Uso de JSHint

En muchas ocasiones el navegador que estemos utilizando para poder trabajar en nuestros desarrollos puede quedarnos algo corto al momento de estar detectando errores. Para eso se desarrolló JSHint, o JSHint. Este JSHint lo que hace es detectar errores y potenciales problemas en tu código de JavaScript, y te envía una lista de qué es lo que está sucediendo. Lo único que tenemos que hacer es acceder al sitio 'jshint.com' y, a partir de aquí, estar agregando el código que necesitamos que se revise. Vamos a abrir nuestro archivo 'app.js', que se encuentra en la carpeta '6.5 JSHint' y copiamos el código de JavaScript que viene incluido. Lo vamos a pegar en esta primera sección e inmediatamente, pegándolo, me hace un reporte de qué es lo que sucede. en este caso me dice que hay tres funciones en este archivo. Y efectivamente aquí tenemos una función, otra función y una tercera función. De allí me da también un detalle de los argumentos y de las cosas que sucedan. Por ahora este código está bien escrito. Pero ¿qué pasa si yo, por ejemplo, en algún momento escribí algo mal? Automáticamente me envía los detalles de lo que puede estar saliendo mal para que yo pueda corregirlo. O incluso, si de pronto tengo alguna implementación mal hecha de algún lenguaje o de alguna palabra reservada o de algún método propio de JavaScript, esto me lo va a permitir detectar. También cuenta con una versión instalable, la cual vas a poder descargar instalar en tu equipo para que, cada vez que estés desarrollando, o si estás en un proceso automatizado de publicación, pueda estar generando una ejecución de JSHint dentro de tu código. Si requieres configurar JSHint, simplemente pulsas este botón en que dice Configure en la parte superior, casi a mitad de la pantalla, y eliges las opciones que quieras que te reporte o que quieres que te esté notificando tu servicio.


6.6 Librerías de JavaScript

En la actualidad, todos nuestros desarrollos hacen uso generalmente de una o varias librerías externas. Este tipo de librerías que nos van a facilitar muchísimo el trabajo y el desarrollo de nuestra aplicación. Pero hay que tener algo muy importante en cuenta: no podemos estar eligiendo cualquier tipo de librería que encontremos en Internet. Debemos garantizar que la librería que estemos utilizando tenga soporte y esté siendo actualizada regularmente. Por ejemplo, algunos de estos tipos de "frameworks" o librerías basadas en JavaScript que tienen soporte regular y que se están actualizando continuamente pueden ser jQuery, jQuery Mobile, Angular, que, de hecho Angular, en su sitio de GitHub, puedes ver qué días se ha estado actualizando, hace cuánto tiempo que no se actualiza o en qué versión se encuentra. Lo mismo puede pasar si tú trabajas con React, por ejemplo, desde el GitHub de Facebook, o si trabajas con Bootstrap o Foundation, que, de hecho, Foundation para esta fecha es el que ha tenido más actualizaciones en días recientes, puesto que están liberando una nueva versión para su "framework" responsivo. También es necesario que tú veas, si vas a integrar algún tipo de aplicación móvil, como puede ser Cordova, o como puede ser PhoneGap o Ionic, entonces que te verifiques que realmente estén actualizados a las últimas versiones. Ya que algunos de los componentes requieren interacciones con los últimos componentes de los dispositivos en el sistema operativo que se está ejecutando, entonces es necesario que cada uno de estos "frameworks" esté actualizado. Si tú trabajas con este tipo de elementos, también puedes garantizar que el "performance" de tu aplicación vaya mejorando y, por tanto, tu aplicación sea más profesional. Incluso, si tú llegas a elegir alguna librería que hace mucho tiempo no tenga alguna respuesta o no tenga algún movimiento, generalmente en sus repositorios de código, como puede ser GitHub, por ejemplo, entonces te recomendaría no confiar tanto en ese tipo de librerías, dado que pueden representar demasiadas vulnerabilidades en el código y, por tanto, esto puede ser una brecha de seguridad muy importante para el desarrollo de tu aplicación. Así que entonces usa con cuidado el tipo de librerías que vayas a utilizar y vayas a integrar en tu proyecto web.


6.7 Testing con JavaScript

Una de las mejores maneras para validar que tu código funcione adecuadamente es realizarle pruebas a través de un "framework" llamado MochaJS, el cual corre a través de un servidor con Node.js, y podrás verificar los resultados en un navegador, haciendo este tipo de pruebas asíncronas bastante simples y sencillas. La manera para que puedas instalarlo es simplemente que ejecutes el comando 'npm install -g mocha' y esto comenzará a hacer la descarga. Este comando se va a ejecutar en tu línea de comandos, para lo cual puedes llegar a abrirla y, una vez que te encuentres ya en alguna de las carpetas donde desees trabajar, simplemente ejecutes dicho comando. Y esto se va a conectar con el servidor de "Node Package Manager" para que pueda descargar todo lo necesario. Recuerda, necesitas tener instalado previamente Node.js. Y una vez que ya lo tengas instalado, lo único que necesitarás es generar un editor donde vas a estar escribiendo las pruebas para corroborar si tu código funciona adecuadamente. Es un paso bastante sencillo, pero nos sirve cuando tenemos bien segmentado nuestro código, separado en controladores o en una estructura adecuada para entenderlo. Una vez que nosotros tenemos entendido bien nuestro código, podemos ejecutar las pruebas. Si estas pruebas funcionan correctamente, quiere decir que nuestras funciones o nuestros métodos pueden trabajar sin problemas en un ambiente de producción.


6.8 Despedida y conclusiones de Buenas prácticas con JavaScript

Hemos llegado al final de este curso y, a través de cuatro principales categorías, pudimos revisar algunas de las mejores prácticas para trabajar con JavaScript. Si bien hay muchas prácticas buenas que podemos estar utilizando en nuestro desarrollo diario, el compendio que hemos visto alrededor de este curso son algunas de las más utilizadas y que bien te podrán servir en tu día a día. Revisamos cuestiones trabajando con variables, estructuras, objetos, algunas cuestiones de estilo que son muy importantes al momento de estar escribiendo nuestro código, así como organizarlo, y también cuestiones de "performance". Entre estas, cuestiones, por ejemplo, sobre cómo poder declarar variables. Sí, aunque suene a algo muy básico, pero también tiene su forma de hacerse para que esto nos pueda ayudar a trabajar mejor. También repasamos cómo podemos evitar algunos cálculos innecesarios solamente con mover algunas líneas de código de lugar, o incluso cómo, solamente con el movimiento de algunas líneas, podemos llegar a evitar la invocación de algunos métodos, y con esto optimizar los recursos de nuestra aplicación. También pudimos revisar cómo hacer unas pruebas de rendimiento a nuestro código. Esto, utilizando los métodos de 'time' y 'timeEnd' para revisar el tiempo que tarda en ejecutarse. Seguramente no estamos acostumbrados a ver ese tipo de cosas, pero, ya que lo empieces a ocupar en tus desarrollos, verás qué tan bueno es optimizar el código. Del mismo modo, trabajamos también con JSON y vimos como, con jQuery, es bastante sencillo utilizarlo; tanto, que hasta pudimos conectarnos a un servicio remoto que utiliza este tipo de formato. Y, de la misma manera, pudimos utilizar servicios de minificación y de ofuscado de código para también poder reducir el impacto de uso de nuestra aplicación. Y también, otra de las cosas muy importantes que trabajamos, fueron los comentarios, donde no solamente vimos cómo trabajar con los comentarios o qué tipo de estándares podíamos seguir para esto, sino también pudimos revisar algunas herramientas para generar código de comentarios automáticamente, y también para poder indentar sin ningún problema nuestro código y de una manera muy sencilla. Así también algunos servicios como JSHint o JSLint, que me van a permitir a mí verificar cuestiones tanto de estilo como de errores cruciales en el código, y con esto poder optimizar mi flujo de trabajo. Esperamos que todas las prácticas y tips que revisamos a lo largo de este curso te sirvan de mucho en tus próximos desarrollos.


6.9 PRUEBA PENDIENTE - 9 PREGUNTAS
